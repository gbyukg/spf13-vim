set exrc
set secure

set scrolljump=0                " Lines to scroll when cursor leaves screen
set scrolloff=8                 " Minimum lines to keep above and below cursor
set sidescrolloff=15
set sidescroll=1
setlocal nospell

" key mapping {
    "iunmap <CR>
    nmap <leader>Sc :SyntasticCheck<CR>
    nmap <F5> :SyntasticReset<CR>

    nnoremap <silent> <C-k>              :wincmd k<CR>
    nnoremap <silent> <C-j>              :wincmd j<CR>
    nnoremap <silent> <C-h>              :wincmd h<CR>
    nnoremap <silent> <C-l>              :wincmd l<CR>
    inoremap <silent> <C-k>         <Esc>:wincmd k<CR>
    inoremap <silent> <C-j>         <Esc>:wincmd j<CR>
    inoremap <silent> <C-h>         <Esc>:wincmd h<CR>
    inoremap <silent> <C-l>         <Esc>:wincmd l<CR>
    nnoremap <silent> <C-Up>             :wincmd k<CR>
    nnoremap <silent> <C-Down>           :wincmd j<CR>
    nnoremap <silent> <C-Left>           :wincmd h<CR>
    nnoremap <silent> <C-Right>          :wincmd l<CR>
    inoremap <silent> <C-Up>        <Esc>:wincmd k<CR>
    inoremap <silent> <C-Down>      <Esc>:wincmd j<CR>
    inoremap <silent> <C-Left>      <Esc>:wincmd h<CR>
    inoremap <silent> <C-Right>     <Esc>:wincmd l<CR>

    imap <S-Space> <Esc>
    " noremap <silent> <S-u>               :UndotreeToggle<CR>

    " 切换buffer
    "nnoremap <silent> <C-S-Tab> :bprev<CR>
    "nnoremap <silent> <C-Tab> :bnext<CR>
    nnoremap <leader>x :bnext<cr>
    nnoremap <leader>z :bprev<cr>

    nnoremap <silent> <C-x> :BufOnly<CR>

    " 格式化
    noremap <leader>f :Autoformat<CR><CR>

    " 保存
    nnoremap <leader>w :w<cr>
    inoremap <leader>w <C-c>:w<cr>
    nnoremap <leader>wq :wq<cr>
    inoremap <leader>wq <C-c>:wq<cr>

    " 退出
    noremap <leader>q :q<cr>

    " 切换tab
    noremap <S-l> gt
    noremap <S-h> gT
    nnoremap <D-1> 1gt
    nnoremap <D-2> 2gt
    nnoremap <D-3> 3gt
    nnoremap <D-4> 4gt
    nnoremap <D-5> 5gt
    nnoremap <D-6> 6gt
    nnoremap <D-7> 7gt
    nnoremap <D-8> 8gt
    nnoremap <D-9> 9gt
    nnoremap <D-0> 10gt

    " 宏
    nnoremap Q @q
    vnoremap Q :norm @q<cr>

    " 切换paste模式, 用于复制
    set pastetoggle=<leader>p

    " 快速对齐段落
    noremap <leader>a =ip

    " 快速复制当前光标所在段落到下一个段落
    noremap cp yap<S-}>p

    " Syntastic check
    nnoremap <silent> <leader>sc :SyntasticCheck<CR>
    nnoremap <silent> <leader>sr :SyntasticReset<CR>
    nnoremap <silent> <leader>se :Errors<CR>

    " Create window splits easier. The default
    " way is Ctrl-w,v and Ctrl-w,s. I remap
    " this to vv and ss
    nnoremap <silent> vv <C-w>v
    nnoremap <silent> ss <C-w>s

    if !exists("g:toggle_list_no_mappings")
        nmap <F3> :call ToggleLocationList()<CR>
        nmap <F4> :call ToggleQuickfixList()<CR>
    endif

    " 输出当前文件信息
    command Info execute "echo expand('%:p')"
    nnoremap <silent> <leader>ii :Info<CR>

    " 一行内容是否多行显示
    :function ToggleWrap()
    : if (&wrap == 1)
    :   if (&linebreak == 0)
    :     set linebreak
    :   else
    :     set nowrap
    :   endif
    : else
    :   set wrap
    :   set nolinebreak
    : endif
    :endfunction
    map <F6> :call ToggleWrap()<CR>

    " 在新窗口中打开VimShell
    nnoremap <silent> <leader>vs :VimShellTab<CR>

    if count(g:spf13_bundle_groups, 'neocomplcache')
        " https://github.com/Shougo/neocomplcache.vim/issues/144
        " set g:neocomplcache_enable_cursor_hold_i is 1
        "inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
        "inoremap <expr> <Left> neocomplcache#close_popup() . "\<Left>"
        "inoremap <expr> <Right> neocomplcache#close_popup() . "\<Right>"
        "inoremap <expr> <Up> neocomplcache#close_popup() . "\<Up>"
        "inoremap <expr> <Down> neocomplcache#close_popup() . "\<Down>"
        "inoremap <expr> <Cr> neocomplcache#close_popup() . "\<Cr>"
        "inoremap <expr> <Bs> neocomplcache#cancel_popup() . "\<Bs>"
    endif
" }

" vim-session {
    let g:session_directory = spf13_consolidated_directory . 'session'
    let g:session_autosave = 'yes'
" }

" Autoformat "https://github.com/Chiel92/vim-autoformat" {
    let g:formatprg_args_expr_cppatprg_php = "phpCB"
    let g:formatprg_args_expr_php = '"--space-after-if --space-after-switch --space-after-while --space-before-start-angle-bracket --space-after-end-angle-bracket --extra-padding-for-case-statement --one-true-brace-function-declaration --glue-amperscore --change-shell-comment-to-double-slashes-comment --force-large-php-code-tag --force-true-false-null-contant-lowercase --align-equal-statements --align-equal-statements-to-fixed-pos --comment-rendering-style PEAR %:p"'
    " 使用pg_format工具格式化SQL
    " :exe "1,$!pg_format %:p"
    let g:formatprg_sql = "pg_format"
    let g:formatprg_args_expr_sql = '"%:p"'
" }

" syntastic {
    " 行号左边状态栏错误标志
    let g:syntastic_enable_signs=1
    let g:syntastic_error_symbol='✗'
    let g:syntastic_warning_symbol='⚠'
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_always_populate_loc_list=1 "Always put errors in the location list
    let g:syntastic_enable_balloons = 1
    let g:syntastic_check_on_wq = 0          " donot check when :wq, :x and :ZZ
    "let g:syntastic_debug = 1
    "let g:syntastic_check_on_open=1         " Always check when buffers are opened

    " C语法检测工具
    let g:syntastic_c_checkers = ['gcc']    " Use gcc as default syntax checker"
    let g:ycm_global_ycm_extra_conf = $HOME . '/.goe/.ycm_extra_conf.py'
    "let g:syntastic_c_checkers = ['make', 'gcc', 'sparse', 'splint']

    " PHP语法检测工具
    let g:syntastic_php_checkers = ['php']
    "let g:syntastic_php_checkers = ['php','phpcs', 'phpmd']

    " JS语法检测工具
    "let g:syntastic_javascript_jshint_conf="/home/gbyukg/.jshintrc"
    let g:yntastic_javascript_jshint_exec = "jshint"
    let g:syntastic_javascript_checkers = ['jshint']

    " bash shell 语法检测工具
    "let g:syntastic_sh_exec = $HOME . "/.cabal/bin/shellcheck"
    let g:syntastic_sh_checkers = ['shellcheck', 'sh']

    " HTML,xHTML语法检测工具
    "let g:syntastic_javascript_checkers = ['jshint']
" }

" phpqa {
    " Don't run messdetector on save (default = 1)
    let g:phpqa_messdetector_autorun = 0

    " Don't run codesniffer on save (default = 1)
    let g:phpqa_codesniffer_autorun = 0

    " Show code coverage on load (default = 0)
    let g:phpqa_codecoverage_autorun = 0
" }

" PIV {
    "let g:DisableAutoPHPFolding = 1
" }

" NerdTree {
    if isdirectory(expand("~/.vim/bundle/nerdtree"))
        let NERDTreeQuitOnOpen=0
    endif
" }

" vim-airline{
    "let g:airline#extensions#tabline#buffer_min_count = 0
    let g:airline_symbols = {}
    let g:airline_left_sep = '⮀'
    let g:airline_left_alt_sep = '⮁'
    let g:airline_right_sep = '⮂'
    let g:airline_right_alt_sep = '⮃'
    let g:airline_symbols.branch = '⭠'
    let g:airline_symbols.readonly = '⭤'
    let g:airline_symbols.linenr = '⭡'
    "let g:airline_theme='powerlineish'
    "let g:airline_theme='murmur'
    let g:airline_theme='bubblegum'
"}

" startify{
    " 设定读取session的路径
    let g:startify_session_dir = spf13_consolidated_directory . 'session'
    " 显示保存的session
    let g:startify_show_sessions = 1
    " 显示的条数
    let g:startify_show_files_number = 15
    let g:startify_skiplist_server = []
"}

if count(g:spf13_bundle_groups, 'youcompleteme')
    " youcompleteme {
        let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/'
        let g:ycm_extra_conf_globlist = $HOME . '/.spf13-vim-3/.ycm_extra_conf.py'
        let g:ycm_confirm_extra_conf=0    "打开vim时不再询问是否加载ycm_extra_conf.py配置
    " }

    " UltiSnips{
        let g:UltiSnipsExpandTrigger = '<C-o>'
        function! <SID>ExpandSnippetOrReturn()
          let snippet = UltiSnips#ExpandSnippetOrJump()
          if g:ulti_expand_or_jump_res > 0
            return snippet
          else
            return "\<CR>"
          endif
        endfunction
        " 使用回车触发(与tpope/vim-endwise冲突)
        " inoremap <expr> <CR> pumvisible() ? "<C-R>=<SID>ExpandSnippetOrReturn()<CR>" : "\<CR>"
    " }
endif

" CtrlP{
    let g:ctrlp_cache_dir = spf13_consolidated_directory . 'ctrlp'
    let g:ctrlp_max_files = 0
    let g:ctrlp_max_depth = 0
    let g:ctrlp_mruf_max = 250
    " 只显示当前目录下的最近打开过的文件
    let g:ctrlp_mruf_relative = 1
    let g:ctrlp_prompt_mappings = { 'ToggleMRURelative()': ['<F3>'] }
    "unmap <CR>
" }

" mbbill/undotree{
    let g:undotree_WindowLayout = 4
"}

" vim-buffergator{
    "let g:buffergator_viewport_split_policy = "T"
" }

" vim-buftabline 用来替代ex-minibufexpi {
    if isdirectory(expand("~/.vim/bundle/vim-buftabline/"))
        " 关闭minibufexpi
        if has('gui_running')
            let g:buftabline_show = 2
        else
            let g:buftabline_show = 0
        endif
        let g:buftabline_numbers =1
    endif
" }

" exVim{
    " Plugin 'exvim/ex-gsearch'
    "call exgsearch#register_hotkey( 100, 0, '<leader>st', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
    "unmap <leader>gg
    "call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
    "call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )

    "Plugin 'exvim/ex-tags'
    "call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
    "call extags#register_hotkey( 101, 0, '<leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
    " DISABLE: nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>

    "Plugin 'exvim/ex-symbol'
    "call exsymbol#register_hotkey( 100, 0, '<leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
    "call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
    "call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )
"}

" tacahiroy/ctrlp-funky{
    let g:ctrlp_funky_syntax_highlight = 1
    "let g:ctrlp_funky_use_cache = 1
    "let g:ctrlp_funky_cache_dir =
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
" }

" Shougo/unite.vim 和 hewes/unite-gtags {
    let g:unite_data_directory = g:spf13_consolidated_directory . 'unite'
    let g:unite_source_bookmark_directory = g:spf13_consolidated_directory . 'bookmark'
    let g:unite_source_history_yank_file = g:spf13_consolidated_directory . 'yankring.txt'
    let g:unite_source_rec_async_command = 'ack -f --ignore-dir="cache"'

    "nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
    unmap <leader>ff
    "nnoremap <leader>ff :<C-u>Unite -start-insert file<CR>
    nnoremap <leader>ff :<C-u>Unite file<CR>
    nnoremap <leader>fb :<C-u>Unite buffer<CR>
    nnoremap <leader>fd :<C-u>Unite gtags/def<CR>
    nnoremap <leader>fr :<C-u>Unite gtags/ref<CR>
" }

" 设置gvim字体与主题
" GUI Settings {
    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
        set guioptions-=T           " Remove the toolbar
        set lines=40                " 40 lines of text instead of 24
        if LINUX() && has("gui_running")
            set guifont=Andale\ Mono\ Regular\ 12,Menlo\ Regular\ 11,Consolas\ Regular\ 12,Courier\ New\ Regular\ 14
        elseif OSX() && has("gui_running")
            set guifont=Ayuthaya:h12,Andale\ Mono:h13,Source\ Code\ Pro\ for\ Powerline:h18,Menlo\ Regular:h13,Consolas\ Regular:h16,Courier\ New\ Regular:h18
            " 最大化窗口
            set lines=999 columns=999
            " set transparency=5
        elseif WINDOWS() && has("gui_running")
            set guifont=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10
        endif
    else
        if &term == 'xterm' || &term == 'screen'
            set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
        endif
        "set term=builtin_ansi       " Make arrow and other keys work
    endif

" }

" 卸载插件{
    UnBundle 'mattn/webapi-vim'
    UnBundle 'mattn/gist-vim'
    UnBundle 'kchmck/vim-coffee-script'
    UnBundle 'briancollins/vim-jst'
    UnBundle 'rust-lang/rust.vim'
    UnBundle 'bling/vim-bufferline'
    UnBundle 'vim-scripts/sessionman.vim'
    UnBundle 'tpope/vim-abolish.git'
" }
